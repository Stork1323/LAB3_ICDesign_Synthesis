
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 12 2024 10:12:30

// Verification Directory fv/synth_wrapper 

module full_adder(a_i, b_i, c_i, s_o, c_o);
  input a_i, b_i, c_i;
  output s_o, c_o;
  wire a_i, b_i, c_i;
  wire s_o, c_o;
  wire n_3, n_5, n_6, n_7, n_8;
  xor g1 (n_3, a_i, b_i);
  xor g2 (s_o, n_3, c_i);
  and g3 (n_5, a_i, b_i);
  and g4 (n_6, a_i, c_i);
  or g5 (n_7, n_5, n_6);
  and g6 (n_8, b_i, c_i);
  or g7 (c_o, n_7, n_8);
endmodule

module adder_4bit(a_i, b_i, s_o, c_o);
  input [3:0] a_i, b_i;
  output [3:0] s_o;
  output c_o;
  wire [3:0] a_i, b_i;
  wire [3:0] s_o;
  wire c_o;
  wire \c_w[0] , \c_w[1] , \c_w[2] ;
  full_adder A0(a_i[0], b_i[0], 1'b0, s_o[0], \c_w[0] );
  full_adder A1(a_i[1], b_i[1], \c_w[0] , s_o[1], \c_w[1] );
  full_adder A2(a_i[2], b_i[2], \c_w[1] , s_o[2], \c_w[2] );
  full_adder A3(a_i[3], b_i[3], \c_w[2] , s_o[3], c_o);
endmodule

module and_4bit(a_i, b_i, c_o);
  input [3:0] a_i, b_i;
  output [3:0] c_o;
  wire [3:0] a_i, b_i;
  wire [3:0] c_o;
  and g1 (c_o[0], a_i[0], b_i[0]);
  and g2 (c_o[1], a_i[1], b_i[1]);
  and g3 (c_o[2], a_i[2], b_i[2]);
  and g4 (c_o[3], a_i[3], b_i[3]);
endmodule

module not_4bit(a_i, c_o);
  input [3:0] a_i;
  output [3:0] c_o;
  wire [3:0] a_i;
  wire [3:0] c_o;
  not g1 (c_o[0], a_i[0]);
  not g2 (c_o[1], a_i[1]);
  not g3 (c_o[2], a_i[2]);
  not g4 (c_o[3], a_i[3]);
endmodule

module or_4bit(a_i, b_i, c_o);
  input [3:0] a_i, b_i;
  output [3:0] c_o;
  wire [3:0] a_i, b_i;
  wire [3:0] c_o;
  or g1 (c_o[0], a_i[0], b_i[0]);
  or g2 (c_o[1], a_i[1], b_i[1]);
  or g3 (c_o[2], a_i[2], b_i[2]);
  or g4 (c_o[3], a_i[3], b_i[3]);
endmodule

module full_subtractor(a_i, b_i, c_i, d_o, b_o);
  input a_i, b_i, c_i;
  output d_o, b_o;
  wire a_i, b_i, c_i;
  wire d_o, b_o;
  wire n_3, n_5, n_6, n_7, n_8;
  xor g1 (n_3, a_i, b_i);
  xor g2 (d_o, n_3, c_i);
  not g3 (n_5, a_i);
  xor g4 (n_6, b_i, c_i);
  and g5 (n_7, n_5, n_6);
  and g6 (n_8, b_i, c_i);
  or g7 (b_o, n_7, n_8);
endmodule

module subtractor_4bit(a_i, b_i, d_o, b_o);
  input [3:0] a_i, b_i;
  output [3:0] d_o;
  output b_o;
  wire [3:0] a_i, b_i;
  wire [3:0] d_o;
  wire b_o;
  wire \b_w[0] , \b_w[1] , \b_w[2] ;
  full_subtractor S0(a_i[0], b_i[0], 1'b0, d_o[0], \b_w[0] );
  full_subtractor S1(a_i[1], b_i[1], \b_w[0] , d_o[1], \b_w[1] );
  full_subtractor S2(a_i[2], b_i[2], \b_w[1] , d_o[2], \b_w[2] );
  full_subtractor S3(a_i[3], b_i[3], \b_w[2] , d_o[3], b_o);
endmodule

module shift_left_4bit(a_i, b_i, c_o);
  input [3:0] a_i, b_i;
  output [3:0] c_o;
  wire [3:0] a_i, b_i;
  wire [3:0] c_o;
  wire n_4, n_5, n_6, n_8, n_10, n_15, n_16, n_17;
  wire n_19, n_28, n_101, n_102, n_103, n_104, n_105, n_129;
  wire n_130;
  or g1 (n_4, b_i[2], b_i[3]);
  not g2 (n_5, a_i[0]);
  or g3 (n_6, n_4, n_5);
  or g4 (n_8, n_6, b_i[0]);
  or g5 (n_10, n_8, b_i[1]);
  not g6 (c_o[0], n_10);
  not g7 (n_101, a_i[3]);
  or g8 (n_17, n_4, n_101);
  not g9 (n_15, a_i[2]);
  or g10 (n_16, n_4, n_15);
  CDN_bmux2 g11(.sel0 (b_i[0]), .data0 (n_17), .data1 (n_16), .z
       (n_104));
  not g12 (n_19, a_i[1]);
  or g13 (n_102, n_4, n_19);
  CDN_bmux2 g14(.sel0 (b_i[0]), .data0 (n_102), .data1 (n_6), .z
       (n_103));
  CDN_bmux2 g15(.sel0 (b_i[1]), .data0 (n_104), .data1 (n_103), .z
       (n_105));
  not g16 (c_o[3], n_105);
  or g17 (n_129, n_103, b_i[1]);
  not g18 (c_o[1], n_129);
  CDN_bmux2 g19(.sel0 (b_i[0]), .data0 (n_16), .data1 (n_102), .z
       (n_130));
  CDN_bmux2 g20(.sel0 (b_i[1]), .data0 (n_130), .data1 (n_8), .z
       (n_28));
  not g21 (c_o[2], n_28);
endmodule

module shift_right_4bit(a_i, b_i, c_o);
  input [3:0] a_i, b_i;
  output [3:0] c_o;
  wire [3:0] a_i, b_i;
  wire [3:0] c_o;
  wire n_4, n_5, n_7, n_9, n_10, n_15, n_16, n_18;
  wire n_19, n_28, n_101, n_102, n_103, n_104, n_105, n_129;
  wire n_130;
  or g1 (n_4, b_i[2], b_i[3]);
  not g2 (n_5, a_i[0]);
  or g3 (n_10, n_4, n_5);
  not g4 (n_7, a_i[1]);
  or g5 (n_9, n_4, n_7);
  CDN_bmux2 g6(.sel0 (b_i[0]), .data0 (n_10), .data1 (n_9), .z (n_19));
  not g7 (n_101, a_i[2]);
  or g8 (n_16, n_4, n_101);
  not g9 (n_102, a_i[3]);
  or g10 (n_15, n_4, n_102);
  CDN_bmux2 g11(.sel0 (b_i[0]), .data0 (n_16), .data1 (n_15), .z
       (n_18));
  CDN_bmux2 g12(.sel0 (b_i[1]), .data0 (n_19), .data1 (n_18), .z
       (n_103));
  not g13 (c_o[0], n_103);
  or g14 (n_104, n_15, b_i[0]);
  or g15 (n_105, n_104, b_i[1]);
  not g16 (c_o[3], n_105);
  or g17 (n_129, n_18, b_i[1]);
  not g18 (c_o[2], n_129);
  CDN_bmux2 g19(.sel0 (b_i[0]), .data0 (n_9), .data1 (n_16), .z
       (n_130));
  CDN_bmux2 g20(.sel0 (b_i[1]), .data0 (n_130), .data1 (n_104), .z
       (n_28));
  not g21 (c_o[1], n_28);
endmodule

module xor_4bit(a_i, b_i, c_o);
  input [3:0] a_i, b_i;
  output [3:0] c_o;
  wire [3:0] a_i, b_i;
  wire [3:0] c_o;
  xor g1 (c_o[0], a_i[0], b_i[0]);
  xor g2 (c_o[1], a_i[1], b_i[1]);
  xor g3 (c_o[2], a_i[2], b_i[2]);
  xor g4 (c_o[3], a_i[3], b_i[3]);
endmodule

module alu(clk_i, rst_ni, op_i, a_i, b_i, result_o, carry_o);
  input clk_i, rst_ni;
  input [2:0] op_i;
  input [3:0] a_i, b_i;
  output [3:0] result_o;
  output carry_o;
  wire clk_i, rst_ni;
  wire [2:0] op_i;
  wire [3:0] a_i, b_i;
  wire [3:0] result_o;
  wire carry_o;
  wire [3:0] add_w;
  wire [3:0] sub_w;
  wire carry_a_w, carry_d, carry_s_w, n_28, n_42, n_43, n_44, n_46;
  wire n_47, n_48, n_49, n_50, n_51, n_52, n_53, n_54;
  wire n_55, n_56, n_57, n_58, n_59, n_60, n_61, n_62;
  wire n_63, n_64, n_65, n_66, n_67, n_68, n_69, n_102;
  wire n_105, n_107, n_109, n_111, n_113, n_115, n_117, n_119;
  wire n_120, n_123, n_125, n_129, n_132, n_135, n_136, n_138;
  wire n_140, n_143, n_146, n_149, n_152, n_155, n_159, n_162;
  wire n_165, n_169, n_170, n_216, n_217, n_218, n_219, n_220;
  wire n_221, n_222, n_223, n_224, n_225, n_226, n_227, n_228;
  wire n_229, n_230, n_231, n_232, n_233, n_234, n_235, n_236;
  wire n_237, n_238, n_239, n_240, n_241, n_242, n_243, n_244;
  wire n_245, n_246, n_247, n_248, n_249, n_250, n_251, n_252;
  wire n_253, n_254, n_255, n_256, n_257, n_258, n_259, n_260;
  wire n_261, n_262, n_263, n_264, n_265, n_266, n_267, n_268;
  wire n_368, n_452, n_453, n_454, n_455, n_456, n_457, n_458;
  wire n_459, n_460, n_461, n_462, n_463, n_464, n_465, n_466;
  wire n_467, n_468, n_469, n_470, n_471, n_472, n_473, n_474;
  wire n_475, n_476, n_477, n_478, n_479, n_480, n_481, n_482;
  wire n_483, n_484, n_485, n_486, n_487, n_488, n_489, n_490;
  wire n_491, n_492, n_493, n_494, n_495, n_496, n_497, n_498;
  wire n_499, n_500, n_501, n_502, n_503, n_504, n_505, n_506;
  wire n_507, n_508, n_509, n_510, n_511, n_512, n_513, n_514;
  wire n_515, n_516, n_517, n_518, n_519, n_520, n_521, n_522;
  wire n_523, n_524, n_525, n_526, n_527, n_528, n_529, n_530;
  adder_4bit A0(a_i, b_i, add_w, carry_a_w);
  and_4bit A1(a_i, b_i, {n_64, n_58, n_52, n_46});
  not_4bit N0(a_i, {n_67, n_61, n_55, n_49});
  or_4bit O0(a_i, b_i, {n_65, n_59, n_53, n_47});
  subtractor_4bit S0(a_i, b_i, sub_w, carry_s_w);
  shift_left_4bit SL(a_i, b_i, {n_69, n_63, n_57, n_51});
  shift_right_4bit SR(a_i, b_i, {n_68, n_62, n_56, n_50});
  xor_4bit X0(a_i, b_i, {n_66, n_60, n_54, n_48});
  CDN_flop carry_o_reg(.clk (clk_i), .d (carry_d), .sena (1'b1), .aclr
       (n_28), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry_o));
  not g1 (n_28, rst_ni);
  nor g100 (n_243, n_52, n_53);
  nor g104 (n_246, n_56, n_57);
  nand g23 (n_102, op_i[0], op_i[2], op_i[1]);
  nor g66 (n_216, n_67, n_66);
  nor g71 (n_220, n_64, n_65);
  nor g75 (n_224, n_61, n_60);
  nor g79 (n_227, n_58, n_59);
  nor g83 (n_230, n_55, n_54);
  nor g88 (n_233, n_50, n_51);
  nor g92 (n_237, n_46, n_47);
  nor g96 (n_240, n_49, n_48);
  CDN_flop \result_o_reg[0] (.clk (clk_i), .d (n_170), .sena (1'b1),
       .aclr (n_28), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result_o[0]));
  CDN_flop \result_o_reg[1] (.clk (clk_i), .d (n_155), .sena (1'b1),
       .aclr (n_28), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result_o[1]));
  CDN_flop \result_o_reg[2] (.clk (clk_i), .d (n_140), .sena (1'b1),
       .aclr (n_28), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result_o[2]));
  CDN_flop \result_o_reg[3] (.clk (clk_i), .d (n_125), .sena (1'b1),
       .aclr (n_28), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result_o[3]));
  CDN_mux3 mux_carry_d_26_5_g1(.sel0 (n_42), .data0 (carry_a_w), .sel1
       (n_43), .data1 (carry_s_w), .sel2 (n_44), .data2 (1'b0), .z
       (carry_d));
  nor g289 (n_42, op_i[0], n_44);
  not g9 (n_43, n_368);
  not g585 (n_452, op_i[1]);
  not g586 (n_453, op_i[2]);
  not g587 (n_454, op_i[0]);
  not g588 (n_455, sub_w[0]);
  not g589 (n_456, sub_w[1]);
  not g590 (n_457, sub_w[2]);
  not g591 (n_458, sub_w[3]);
  not g592 (n_459, n_243);
  not g593 (n_460, n_246);
  not g594 (n_461, n_102);
  not g595 (n_462, n_216);
  not g596 (n_463, n_220);
  not g597 (n_464, n_224);
  not g598 (n_465, n_227);
  not g599 (n_466, n_230);
  not g600 (n_467, n_233);
  not g601 (n_468, n_237);
  not g602 (n_469, n_240);
  nand g603 (n_44, n_453, n_452);
  not g604 (n_470, n_44);
  nand g605 (n_368, n_470, op_i[0]);
  nand g606 (n_113, op_i[2], n_452, n_454);
  not g607 (n_471, n_113);
  nand g608 (n_111, op_i[2], n_452, op_i[0]);
  not g609 (n_472, n_111);
  nand g610 (n_105, n_453, op_i[1], n_454);
  not g611 (n_473, n_105);
  nand g612 (n_107, n_453, op_i[1], op_i[0]);
  not g613 (n_474, n_107);
  nand g614 (n_117, op_i[2], op_i[1], n_454);
  not g615 (n_475, n_117);
  nor g616 (n_235, n_50, n_461);
  not g617 (n_476, n_235);
  nor g618 (n_247, n_56, n_461);
  not g619 (n_477, n_247);
  nor g620 (n_219, n_471, n_472);
  not g621 (n_478, n_219);
  nor g622 (n_218, n_66, n_472);
  not g623 (n_479, n_218);
  nor g624 (n_217, n_67, n_471);
  not g625 (n_480, n_217);
  nor g626 (n_223, n_473, n_474);
  not g627 (n_481, n_223);
  nor g628 (n_222, n_64, n_474);
  not g629 (n_482, n_222);
  nor g630 (n_221, n_65, n_473);
  not g631 (n_483, n_221);
  nor g632 (n_226, n_60, n_472);
  not g633 (n_484, n_226);
  nor g634 (n_225, n_61, n_471);
  not g635 (n_485, n_225);
  nor g636 (n_229, n_58, n_474);
  not g637 (n_486, n_229);
  nor g638 (n_228, n_59, n_473);
  not g639 (n_487, n_228);
  nor g640 (n_232, n_55, n_471);
  not g641 (n_488, n_232);
  nor g642 (n_231, n_54, n_472);
  not g643 (n_489, n_231);
  nor g644 (n_236, n_461, n_475);
  not g645 (n_490, n_236);
  nor g646 (n_234, n_51, n_475);
  not g647 (n_491, n_234);
  nor g648 (n_239, n_46, n_474);
  not g649 (n_492, n_239);
  nor g650 (n_238, n_47, n_473);
  not g651 (n_493, n_238);
  nor g652 (n_242, n_49, n_471);
  not g653 (n_494, n_242);
  nor g654 (n_241, n_48, n_472);
  not g655 (n_495, n_241);
  nor g656 (n_245, n_53, n_473);
  not g657 (n_496, n_245);
  nor g658 (n_244, n_52, n_474);
  not g659 (n_497, n_244);
  nor g660 (n_248, n_57, n_475);
  not g661 (n_498, n_248);
  nor g662 (n_261, n_455, n_368);
  not g663 (n_499, n_261);
  nor g664 (n_262, n_456, n_368);
  not g665 (n_500, n_262);
  nor g666 (n_267, n_457, n_368);
  not g667 (n_501, n_267);
  nor g668 (n_268, n_458, n_368);
  not g669 (n_502, n_268);
  nand g670 (n_115, n_462, n_478, n_479, n_480);
  not g671 (n_503, n_115);
  nand g672 (n_109, n_463, n_481, n_482, n_483);
  not g673 (n_504, n_109);
  nand g674 (n_132, n_464, n_478, n_484, n_485);
  not g675 (n_505, n_132);
  nand g676 (n_129, n_465, n_481, n_486, n_487);
  not g677 (n_506, n_129);
  nand g678 (n_149, n_466, n_478, n_488, n_489);
  not g679 (n_507, n_149);
  nand g680 (n_169, n_467, n_476, n_490, n_491);
  nand g681 (n_159, n_468, n_481, n_492, n_493);
  not g682 (n_508, n_159);
  nand g683 (n_162, n_469, n_478, n_494, n_495);
  not g684 (n_509, n_162);
  nand g685 (n_146, n_459, n_481, n_496, n_497);
  not g686 (n_510, n_146);
  nand g687 (n_143, n_460, n_477, n_490, n_498);
  nor g688 (n_250, n_475, n_503, n_504);
  not g689 (n_511, n_250);
  nor g690 (n_249, n_68, n_503, n_504);
  not g691 (n_512, n_249);
  nor g692 (n_252, n_475, n_505, n_506);
  not g693 (n_513, n_252);
  nor g694 (n_251, n_62, n_505, n_506);
  not g695 (n_514, n_251);
  nor g696 (n_254, n_42, n_507, n_510);
  not g697 (n_515, n_254);
  nor g698 (n_253, add_w[1], n_507, n_510);
  not g699 (n_516, n_253);
  nor g700 (n_256, n_42, n_508, n_509);
  not g701 (n_517, n_256);
  nor g702 (n_255, add_w[0], n_508, n_509);
  not g703 (n_518, n_255);
  nand g704 (n_119, n_511, n_512);
  not g705 (n_519, n_119);
  nand g706 (n_135, n_513, n_514);
  not g707 (n_520, n_135);
  nand g708 (n_152, n_515, n_516);
  nand g709 (n_165, n_517, n_518);
  nand g710 (n_170, n_499, n_169, n_165);
  nand g711 (n_155, n_500, n_143, n_152);
  nor g712 (n_258, n_461, n_519);
  not g713 (n_521, n_258);
  nor g714 (n_257, n_69, n_519);
  not g715 (n_522, n_257);
  nor g716 (n_260, n_461, n_520);
  not g717 (n_523, n_260);
  nor g718 (n_259, n_63, n_520);
  not g719 (n_524, n_259);
  nand g720 (n_120, n_521, n_522);
  not g721 (n_525, n_120);
  nand g722 (n_136, n_523, n_524);
  not g723 (n_526, n_136);
  nor g724 (n_264, n_42, n_525);
  not g725 (n_527, n_264);
  nor g726 (n_263, add_w[3], n_525);
  not g727 (n_528, n_263);
  nor g728 (n_266, n_42, n_526);
  not g729 (n_529, n_266);
  nor g730 (n_265, add_w[2], n_526);
  not g731 (n_530, n_265);
  nand g732 (n_123, n_527, n_528);
  nand g733 (n_138, n_529, n_530);
  nand g734 (n_140, n_501, n_138);
  nand g735 (n_125, n_502, n_123);
endmodule

module synth_wrapper(clk, rst_n, op, a, b, result, carry);
  input clk, rst_n;
  input [2:0] op;
  input [3:0] a, b;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [2:0] op;
  wire [3:0] a, b;
  wire [3:0] result;
  wire carry;
  wire [2:0] op_reg;
  wire [3:0] a_reg;
  wire [3:0] b_reg;
  wire carry_reg_48, n_17, \result_reg[0]_36 , \result_reg[1]_37 ,
       \result_reg[2]_38 , \result_reg[3]_39 ;
  alu ALU0(clk, rst_n, op_reg, a_reg, b_reg, {\result_reg[3]_39 ,
       \result_reg[2]_38 , \result_reg[1]_37 , \result_reg[0]_36 },
       carry_reg_48);
  CDN_flop \a_reg_reg[0] (.clk (clk), .d (a[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[0]));
  CDN_flop \a_reg_reg[1] (.clk (clk), .d (a[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[1]));
  CDN_flop \a_reg_reg[2] (.clk (clk), .d (a[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[2]));
  CDN_flop \a_reg_reg[3] (.clk (clk), .d (a[3]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[3]));
  CDN_flop \b_reg_reg[0] (.clk (clk), .d (b[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[0]));
  CDN_flop \b_reg_reg[1] (.clk (clk), .d (b[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[1]));
  CDN_flop \b_reg_reg[2] (.clk (clk), .d (b[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[2]));
  CDN_flop \b_reg_reg[3] (.clk (clk), .d (b[3]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[3]));
  CDN_flop carry_reg(.clk (clk), .d (carry_reg_48), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  not g1 (n_17, rst_n);
  CDN_flop \op_reg_reg[0] (.clk (clk), .d (op[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[0]));
  CDN_flop \op_reg_reg[1] (.clk (clk), .d (op[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[1]));
  CDN_flop \op_reg_reg[2] (.clk (clk), .d (op[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[2]));
  CDN_flop \result_reg[0] (.clk (clk), .d (\result_reg[0]_36 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (\result_reg[1]_37 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (\result_reg[2]_38 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (\result_reg[3]_39 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
